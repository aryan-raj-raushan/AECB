name: Merge in develop

on:
  push:
    branches:
      - develop

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Corrected node version to a valid one
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Unit test
        run: npm run test
    
  # sonar-gateway:
  #   needs: [build]
  #   name: sonar-gateway
  #   runs-on: ubuntu-latest
  #   permissions: read-all
       
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 
  #     - name: Install dependencies
  #       run: yarn
  #     - name: Test and coverage
  #       run: yarn jest --coverage
  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     - name: SonarQube Quality Gate
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push:
    needs: [build]
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set branch variable
        run: echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: k8sportalservicedev
          DockerFile_K8s: ./DockerFile
          IMAGE_TAG: latest
        run: |
          docker build --build-arg Branch=$Branch -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DockerFile_K8s .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
  k8s-deploy:
    needs: [build-and-push]
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Configure kubectl
        run: aws eks --region ap-south-1 update-kubeconfig --name medway-dev # Replace with your EKS cluster name and region
    
      - name: Delete Existing Pod
        run: kubectl delete pods -l app=portal-service-dev -n dev # Corrected typo in "Existing"
